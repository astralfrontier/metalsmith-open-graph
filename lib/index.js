// Generated by CoffeeScript 1.11.1
(function() {
  var assignOg, cheerio, findElementOrValue, minimatch, processFile, url;

  cheerio = require('cheerio');

  minimatch = require('minimatch');

  url = require('url');

  findElementOrValue = function(file, $, value, defaultValue) {
    var element;
    if (value == null) {
      return defaultValue;
    } else if (value.indexOf('.') === 0 || value.indexOf('#') === 0) {
      element = $(value);
      if (element.is('img')) {
        return element.attr('src') || defaultValue;
      } else {
        return element.text() || defaultValue;
      }
    } else {
      return file[value] || defaultValue;
    }
  };

  assignOg = function($, tag, value) {
    if (value != null) {
      tag = $('<meta>').attr('property', "og:" + tag).attr('content', value);
      return $('head').append(tag);
    }
  };

  processFile = function(options, file) {
    var $, description, image, title;
    $ = cheerio.load(file.contents, options);
    title = $("meta[name='title']").attr('content') || $('title').text();
    description = $("meta[name='description']").attr('content');
    image = void 0;
    if (options.title != null) {
      title = findElementOrValue(file, $, options.title, title);
    }
    if (options.description != null) {
      description = findElementOrValue(file, $, options.description, description);
    }
    if (options.image != null) {
      image = findElementOrValue(file, $, options.image, image);
      if (image && (options.siteurl != null)) {
        image = url.resolve(options.siteurl, image);
      }
    }
    assignOg($, 'title', title);
    assignOg($, 'description', description);
    assignOg($, 'image', image);
    return $.html();
  };

  module.exports = function(options) {
    var filenameMatchesPattern;
    filenameMatchesPattern = function(fn) {
      if (options.pattern) {
        return minimatch(fn, options.pattern);
      } else {
        return true;
      }
    };
    return function(files, metalsmith, done) {
      var file, filename;
      for (filename in files) {
        file = files[filename];
        if (filenameMatchesPattern(filename)) {
          file.contents = new Buffer(processFile(options, file));
        }
      }
      return done();
    };
  };

}).call(this);
